---
title: "IRR: Test 1 results"
author: "Abiraahmi Shankar"
format:
  html:
    toc-title: Table of Contents
    toc: true
    toc-depth: 5
    toc-floating: true
    cap-location: top
    page-layout: full
    embed-resources: true
    self-contained-math: true
    self-contained: true
    code-fold: true
    smooth-scroll: true
    link-external-icon: true
    css: styles.css
execute:
  echo: false
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = '/Users/abishankar/Library/CloudStorage/Box-Box/Directing Change: Qualitative interviews (Spring 2025)/Data/Analysis/reliability_app')
```

```{r}
#| echo: false
#| include: false

# Load packages
library(tidyverse)
library(yardstick)
library(dplyr)
library(purrr)
library(irr)
library(knitr)
library(DT)

# Load datasets
coder_01 <- readRDS("responses/aashi.rds") # 1
coder_02 <- readRDS("responses/ritvik.rds") # 2
coder_03 <- readRDS("responses/alinna.rds")
coder_04 <- readRDS("responses/lea.rds") # 3
coder_05 <- readRDS("responses/ayla.rds")
coder_06 <- readRDS("responses/isatu.rds")
coder_07 <- readRDS("responses/colin.rds") # 5
coder_08 <- readRDS("responses/vivian.rds") # 1
# Combine all of Lilian's files into 1
coder_09_01 <- readRDS("responses/lilian_04.rds") %>% 
  filter(id %in% 1:6)
coder_09_02 <- readRDS("responses/lilian_03.rds") %>% 
  filter(id %in% 7:19)
coder_09_03 <- readRDS("responses/lilian_02.rds") %>% 
  filter(id %in% 20:37)
coder_09_04 <- readRDS("responses/lilian_01.rds") %>% 
  filter(id %in% 38:54)
coder_09 <- bind_rows(coder_09_01, coder_09_02, coder_09_03, coder_09_04) %>%
  arrange(id) #4

# List of file names
file_names <- c("coder_01", "coder_02", "coder_03", "coder_04", "coder_05", "coder_06", "coder_07", "coder_08", "coder_09")

for (i in seq_along(file_names)) {
  name <- file_names[i]
  df <- get(name)  # retrieve the data frame by name
  df$is_correct <- df$parent_code == df$code_given  # compare and assign
  # Replace all values in the name column with "coder_0X"
  df$name <- sprintf("coder_%02d", i)  # pads with leading zero if needed
  assign(name, df)  # save the updated data frame back with the same name
}

# Combine all data frames listed in file_names
all_together <- bind_rows(mget(file_names)) %>% 
  as_tibble()

all_levels <- union(unique(all_together$parent_code), unique(all_together$code_given))

all_together <- all_together %>%
  filter(!(id %in% c(24, 26))) %>%  # Drop rows with id 24 or 26 because it was double coded 
  mutate(
    parent_code = factor(parent_code, levels = all_levels),
    code_given = factor(code_given, levels = all_levels)
  )

 # Kappa per coder
kappa_per_coder <- all_together %>%
group_by(name) %>%
summarise(kappa = kap_vec(truth = parent_code, estimate = code_given)) %>%
  arrange(desc(kappa))

```

# All coders

## Reliability per Coder

For each coder, we calculate **Cohen’s Kappa** between two vectors:

-   `truth = parent_code`: the "true" code

-   `estimate = code_given`: the codes assigned by that particular coder

**Cohen’s Kappa) between each individual coder's codes and the true codes**:

```{r}
kable(kappa_per_coder)
```

```{r}
#| echo: false
#| include: false

# Kappa per code
# First, we want all unique codes
all_codes <- unique(all_together$parent_code)

# Kappa per code and overall (all codes)
  fleiss_all <- all_together %>%
  select(id, Excerpt, parent_code, code_given, name) %>%
  pivot_wider(
    names_from = name,
    values_from = code_given,
    names_prefix = "code_given_")

  fleiss_all <- kappam.fleiss(fleiss_all %>% select(starts_with("code_given")), detail = TRUE)
  
  fleiss_all_table <- as.data.frame(fleiss_all$detail) %>% 
    filter(Var2 == "Kappa") %>%
    rename(Code = Var1,
           Kappa = Freq) %>% 
    select(Code, Kappa) %>% 
     arrange(desc(Kappa))
  
```

## Reliability per Code

-   Selects only the codes selected by each coder

-   `kappam.fleiss()` calculates the **inter-rater agreement** across multiple coders, per code

**Fleiss’ Kappa does *not* compare against a “true” or gold-standard code** - it only assesses inter-rater agreement among multiple raters' responses (e.g., `code_given_*` columns). It answers the question:

> **"How consistently are the raters assigning the same codes?"**\
>
> not: "How accurately are the raters matching a correct answer?"

**Fleiss' Kappa per Code:**

```{r}
fleiss_all_table %>%
  datatable(options = list(pageLength = 20), rownames = FALSE)
```

# Strong coders only

## Reliability per Code

```{r}
#| echo: false
#| include: false

# Strong coders
strong_coders <- kappa_per_coder %>% 
  filter(kappa > 0.6) %>%
  pull(name)

# Keep only strong coders 
  fleiss_strong <- all_together %>%
  select(id, Excerpt, parent_code, code_given, name) %>%
  filter(name %in% strong_coders) %>%  # keep only rows with strong coders
  pivot_wider(
    names_from = name,
    values_from = code_given,
    names_prefix = "code_given_"
  )

  fleiss_strong <- kappam.fleiss(fleiss_strong %>% select(starts_with("code_given")), detail = TRUE)
  
   fleiss_strong_table <- as.data.frame(fleiss_strong$detail) %>% 
    filter(Var2 == "Kappa") %>%
    rename(Code = Var1,
           Kappa = Freq) %>% 
    select(Code, Kappa) %>% 
     arrange(desc(Kappa))
```

```{r}
fleiss_strong_table %>%
  datatable(options = list(pageLength = 20), rownames = FALSE)
```

# Comparison: All vs Strong Coders

```{r}
#| echo: false
#| include: false

# Rename kappa columns before joining to avoid confusion
fleiss_all_renamed <- fleiss_all_table %>%
  rename(kappa_all = Kappa)

fleiss_strong_renamed <- fleiss_strong_table %>%
  rename(kappa_strong = Kappa)

# Join by code
combined_fleiss_table <- fleiss_all_renamed %>%
  full_join(fleiss_strong_renamed, by = "Code")
```

```{r}
combined_fleiss_table %>%
  select(Code, kappa_strong, kappa_all) %>%
  arrange(desc(kappa_strong)) %>% 
  datatable(options = list(pageLength = 20), rownames = FALSE)
```

# Confident codes

```{r}
combined_fleiss_table %>%
  select(Code, kappa_strong) %>%
  filter(kappa_strong > 0.6) %>% 
  arrange(desc(kappa_strong)) %>% 
  datatable(options = list(pageLength = 20))
```

# Next steps

1.  Clarify definitions and excerpts with the below codes, particularly those important to our Theory of Change: **Shift in MH/S norms, Opening conversations, Sense of Connectedness, Student: Help-seeking for Others**

```{r}
combined_fleiss_table %>%
  select(Code, kappa_strong) %>%
  filter(kappa_strong < 0.6) %>% 
  arrange(desc(kappa_strong)) %>% 
  datatable(options = list(pageLength = 20), rownames = FALSE)
```

2.  Mix of merging, dropping codes till we get smaller subset we feel confident about
3.  Recode past transcripts
4.  Reassess saturation
