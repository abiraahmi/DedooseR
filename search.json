[{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://abiraahmi.github.io/DedooseR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Abiraahmi Shankar. Author, maintainer. Catalina Cañizares. Author. Francisco Cardozo. Author. Pamela Morris-Perez. Author.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shankar , Cañizares C, Cardozo F, Morris-Perez P (2025). DedooseR: DedooseR Qualitative data monitoring & analysis. R package version 0.0.4, https://abiraahmi.github.io/DedooseR.","code":"@Manual{,   title = {DedooseR: DedooseR for Qualitative data monitoring & analysis},   author = {Abiraahmi Shankar and Catalina Cañizares and Francisco Cardozo and Pamela Morris-Perez},   year = {2025},   note = {R package version 0.0.4},   url = {https://abiraahmi.github.io/DedooseR}, }"},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"dedooser","dir":"","previous_headings":"","what":"DedooseR for Qualitative data monitoring & analysis","title":"DedooseR for Qualitative data monitoring & analysis","text":"DedooseR R package connects Dedoose support analysis qualitative data. built help researchers streamline workflows improve transparency rigor qualitative coding analysis.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"DedooseR for Qualitative data monitoring & analysis","text":"DedooseR currently allows : Clean data exported Dedoose Summarize code frquencies one coder/media title order coder preference Plot raw frequencies proportions codes applied total codes, define min frequency visualize /exclude codes Set saturation criteria plot Plot play saturation criteria sets Produce code co-occurrence heatmaps","code":""},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"coming-soon","dir":"","previous_headings":"Key Features","what":"Coming Soon","title":"DedooseR for Qualitative data monitoring & analysis","text":"Viewing organizing excerpts interactive table Developing codebooks Calculating reliability per coder (Cohen’s kappa) coders (Fleiss’ kappa)","code":""},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"why-this-package","dir":"","previous_headings":"","what":"Why This Package?","title":"DedooseR for Qualitative data monitoring & analysis","text":"Ongoing challenges qualitative research include defining constitutes high-quality data demonstrating transparency saturation reached (Small & Calarco, 2022). Informed guidelines high-quality qualitative research (Hennink & Kaiser, 2022), DedooseR allows better understand data quality tags Dedoose like: concreteness excerpts (priority code) heterogeneity within codes (heterogeneity code) tagging indicators Dedoose exploring R, allows gain greater confidence depth diversity datasets.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"DedooseR for Qualitative data monitoring & analysis","text":"can install development version DedooseR GitHub :","code":"# install.packages(\"pak\") pak::pak(\"abiraahmi/DedooseR\")"},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"DedooseR for Qualitative data monitoring & analysis","text":"basic example shows may package:","code":"library(DedooseR)  # Load excerpts from Dedoose excerpts <- read_xlsx(\"file path\") cooccurence <- read_xlsx(\"file path\")  # Clean data filepath <- \"path/to/your/file\" preferred_coders <- c(\"s\", \"r\", \"l\", \"a\") excerpts <- clean_data(filepath = filepath, preferred_coders = preferred_coders)  # Summarize codes (1 coder/transcript according to listed coder preference) df_all_summary <-summarize_codes(excerpts,                                preferred_coders,                                output_type = \"datatable\")  # Plot counts by raq frequency, proportion of total codes, set minimum count to  # visualize, and/or exclude codes plot_counts(df_all_summary,             plot_proportion = FALSE,             min_count = 40,             exclude_codes = c(\"Priority excerpt\", \"Heterogeniety\"))   # If you've been tagging excerpts by quality indicators, set them below and  # summarize code counts based on these selections  df_qual_summary <- quality_indicators(excerpts,                                    preferred_coders,                                   qual_indicators =                                    c(\"Priority excerpt\", \"Heterogeniety\")) df_all_summary <- summarize_codes(excerpts,                                  preferred_coders,                                  output_type = \"tibble\") # Now call your plot function with these two datasets # You can set a min code frequency to plot or plot by proportion of total counts plot_saturation(   df_all_summary,   df_qual_summary,   qual_indicators = c(\"Priority excerpt\", \"Heterogeniety\"),   min_counts = c(\"Priority excerpt\" = 3, \"Heterogeniety\" = 3),   stacked = TRUE,   as_proportion = FALSE)    # Play around with the thresholds and see which codes reach saturation # Define thresholds thresholds_list <- list(   \"Set 1\" = list(     `Priority excerpt` = 2,     Heterogeniety = 3   ),   \"Set 2\" = list(     `Priority excerpt` = 5,     Heterogeniety = 3   ) )  plot_saturation_comp(   summary_data = summary_data,   quality_summary = quality_summary,   thresholds_list = thresholds_list,   stacked = TRUE,   as_proportion = TRUE,   ncol = 2 )  # Load co-occurence datasets from Dedoose cooccurence <- read_xlsx(\"file path\") # Produce code co-occurence heat map cooccur(cooccurence, min_frequency = 10)"},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"DedooseR for Qualitative data monitoring & analysis","text":"Hennink, M., & Kaiser, B. N. (2022). Sample sizes saturation qualitative research: systematic review empirical tests. Social science & medicine, 292, 114523. Small, M. L., & Calarco, J. M. (2022). Qualitative Literacy: Guide Evaluating Ethnographic Interview Research (1st ed.). University California Press. https://doi.org/10.2307/j.ctv2vr9c4x","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and prepare excerpt-level coding data — clean_data","title":"Clean and prepare excerpt-level coding data — clean_data","text":"function cleans dataset coded excerpts exported Dedoose (similar qualitative coding platform). standardizes variable names, converts code columns logicals, filters preferred coder per transcript, assigns variable labels. codebook also generated saved global environment.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and prepare excerpt-level coding data — clean_data","text":"","code":"clean_data(excerpts, preferred_coders)"},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and prepare excerpt-level coding data — clean_data","text":"excerpts data frame containing raw excerpt-level coding data. Must include least columns media_title excerpt_creator. preferred_coders character vector coder IDs order preference (e.g., c(\"\", \"l\", \"\", \"r\")).","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and prepare excerpt-level coding data — clean_data","text":"cleaned data frame excerpts standardized columns, filtered preferred coder, labeled variables. codebook data frame also assigned global environment.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and prepare excerpt-level coding data — clean_data","text":"cleaning steps performed : Standardize column names lowercase replace spaces underscores. Rename excerpt_copy excerpt present. Drop columns ending \"range\" \"weight\". Identify code columns (names starting \"code\" ending \"applied\"). Convert code columns text logical (TRUE \"true\", otherwise FALSE). Clean rename code column names stripping prefixes/suffixes adding c_ prefix. Save final set cleaned code column names labeling. Filter preferred coder media_title, based order preferred_coders. Apply human-readable variable labels common metadata fields code columns. Generate codebook (variable, label, type) assign global environment codebook.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and prepare excerpt-level coding data — clean_data","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage raw_excerpts <- readxl::read_xlsx(\"inst/raw_data/test_data.xlsx\") preferred <- c(\"a\", \"l\", \"i\", \"r\", \"s\") cleaned <- clean_data(raw_excerpts, preferred)  # View the automatically created codebook head(codebook) } # }"},{"path":"https://abiraahmi.github.io/DedooseR/reference/coccur.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Code Co-occurrence Heatmap — coccur","title":"Plot Code Co-occurrence Heatmap — coccur","text":"Plot Code Co-occurrence Heatmap","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/coccur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Code Co-occurrence Heatmap — coccur","text":"","code":"coccur(file_path, sheet = 1, min_frequency = 5, code_labels = NULL)"},{"path":"https://abiraahmi.github.io/DedooseR/reference/coccur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Code Co-occurrence Heatmap — coccur","text":"file_path String path Excel file containing co-occurrence matrix. sheet Integer string specifying sheet number name (default: 1). min_frequency Numeric; minimum frequency threshold display heatmap (default: 5). code_labels Optional named vector data.frame mapping codes readable labels. named vector: names original codes, values labels. data.frame: must columns 'Code' 'Label'.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/coccur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Code Co-occurrence Heatmap — coccur","text":"ggplot2 heatmap object visualizing code co-occurrences threshold.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/compare_saturation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Code Saturation Across Threshold Sets — compare_saturation","title":"Compare Code Saturation Across Threshold Sets — compare_saturation","text":"function evaluates whether code meets one user-defined saturation thresholds. threshold set defined minimum code count minimum proportion distinct media titles code appears.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/compare_saturation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Code Saturation Across Threshold Sets — compare_saturation","text":"","code":"compare_saturation(   code_counts,   excerpts,   thresholds_list,   output_type = c(\"tibble\", \"kable\") )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/compare_saturation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Code Saturation Across Threshold Sets — compare_saturation","text":"code_counts data frame produced count_codes(), containing columns code, count, n_media_titles. excerpts full excerpts data frame used generate code_counts. Must contain column named media_title. thresholds_list named list threshold sets. element list two components: code_count (minimum frequency across excerpts) prop_media_title (minimum proportion distinct media titles code appears). output_type character string specifying output format. Options : \"tibble\" (default) return tibble, \"kable\" return formatted table via knitr::kable.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/compare_saturation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Code Saturation Across Threshold Sets — compare_saturation","text":"tibble kable-formatted table one row per code. Includes following columns: code — code label. count — number excerpts code. n_media_titles — number distinct media titles code. prop_media_title — proportion total media titles code. One column threshold set, indicating TRUE/FALSE code meets set’s criteria.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/compare_saturation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Code Saturation Across Threshold Sets — compare_saturation","text":"","code":"if (FALSE) { # \\dontrun{ # Example thresholds thresholds_list <- list(   Set1 = list(code_count = 10, prop_media_title = 0.2),   Set2 = list(code_count = 10, prop_media_title = 0.4) )  # Compute code counts code_counts <- count_codes(excerpts)  # Compare saturation against thresholds compare_saturation(code_counts, excerpts, thresholds_list)  # Return as a formatted kable table compare_saturation(code_counts, excerpts, thresholds_list, output_type = \"kable\") } # }"},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the frequency of codes across excerpts — count_codes","title":"Count the frequency of codes across excerpts — count_codes","text":"function counts often logical code columns applied across excerpts, returning number excerpts distinct media titles associated code. also supports excluding certain codes multiple output formats.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the frequency of codes across excerpts — count_codes","text":"","code":"count_codes(   excerpts,   min_count = 1,   output_type = c(\"tibble\", \"kable\", \"datatable\"),   exclude = NULL )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the frequency of codes across excerpts — count_codes","text":"excerpts data frame containing media_title column logical columns representing codes. min_count Minimum number excerpts required code included results. Defaults 1. output_type Output format. One \"tibble\", \"kable\", \"datatable\". Defaults \"tibble\". exclude character vector codes exclude results. Defaults NULL.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the frequency of codes across excerpts — count_codes","text":"summary code counts tibble, knitr::kable, DT::datatable, depending chosen output type.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the frequency of codes across excerpts — count_codes","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tidyr)  # Example data df <- tibble::tibble(   media_title = c(\"doc1\", \"doc2\", \"doc3\"),   code_a = c(TRUE, FALSE, TRUE),   code_b = c(TRUE, TRUE, FALSE),   code_c = c(FALSE, FALSE, TRUE) )  # Count all codes count_codes(df) #> # A tibble: 3 × 3 #>   code   count n_media_titles #>   <chr>  <int>          <int> #> 1 code_a     2              2 #> 2 code_b     2              2 #> 3 code_c     1              1  # Exclude a code count_codes(df, exclude = c(\"code_b\")) #> # A tibble: 2 × 3 #>   code   count n_media_titles #>   <chr>  <int>          <int> #> 1 code_a     2              2 #> 2 code_c     1              1  # Use kable output count_codes(df, output_type = \"kable\") #>  #>  #> Table: Total Code Counts (min_count = 1 ) #>  #> |code   | count| n_media_titles| #> |:------|-----:|--------------:| #> |code_a |     2|              2| #> |code_b |     2|              2| #> |code_c |     1|              1|  # Require at least 2 excerpts count_codes(df, min_count = 2) #> # A tibble: 2 × 3 #>   code   count n_media_titles #>   <chr>  <int>          <int> #> 1 code_a     2              2 #> 2 code_b     2              2"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_compare_saturation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot saturation comparison across threshold sets — plot_compare_saturation","title":"Plot saturation comparison across threshold sets — plot_compare_saturation","text":"function plots saturation codes across multiple threshold sets. Codes meet threshold given set excluded (plotted).","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_compare_saturation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot saturation comparison across threshold sets — plot_compare_saturation","text":"","code":"plot_compare_saturation(compare_results, thresholds_list)"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_compare_saturation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot saturation comparison across threshold sets — plot_compare_saturation","text":"compare_results data frame least code, count, one logical columns indicating whether code meets threshold set. thresholds_list named list thresholds used generate compare_results. names used facet labels.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_compare_saturation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot saturation comparison across threshold sets — plot_compare_saturation","text":"ggplot object showing code saturation threshold set.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_compare_saturation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot saturation comparison across threshold sets — plot_compare_saturation","text":"","code":"library(dplyr) library(ggplot2)  compare_results <- tibble::tibble(   code = c(\"code_a\", \"code_b\", \"code_c\"),   count = c(10, 5, 2),   Set1 = c(TRUE, TRUE, FALSE),   Set2 = c(FALSE, TRUE, TRUE) )  thresholds_list <- list(Set1 = 3, Set2 = 5)  plot_compare_saturation(compare_results, thresholds_list)"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot code frequencies — plot_counts","title":"Plot code frequencies — plot_counts","text":"function takes output count_codes() produces bar plot code frequencies using ggplot2. supports excluding specific codes, filtering absolute count, filtering proportion maximum count. user can choose whether plot total excerpt frequency (count) number distinct media titles containing code (n_media_titles).","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot code frequencies — plot_counts","text":"","code":"plot_counts(   code_counts,   exclude_codes = NULL,   min_count = NULL,   min_prop = NULL,   metric = c(\"count\", \"n_media_titles\"),   fill_color = \"steelblue\" )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot code frequencies — plot_counts","text":"code_counts tibble data frame output count_codes(). Must contain least columns code, count, n_media_titles. exclude_codes character vector code names exclude plot. Defaults NULL (exclusions). min_count integer specifying minimum absolute count code included. Defaults NULL. min_prop numeric value 0 1 specifying minimum proportion (relative maximum chosen metric) required code included. Defaults NULL. metric metric plot. One \"count\" (excerpt frequency) \"n_media_titles\" (media title coverage). Defaults \"count\". fill_color character string giving fill color bars. Defaults \"steelblue\".","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot code frequencies — plot_counts","text":"ggplot object showing code frequencies.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot code frequencies — plot_counts","text":"Codes can filtered either absolute count (min_count) proportion maximum (min_prop). supplied, filters applied. Codes listed exclude_codes removed prior filtering. metric argument controls whether y-axis shows excerpt frequency number unique media titles containing code.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot code frequencies — plot_counts","text":"","code":"# Example data df <- data.frame(   media_title = c(\"Doc1\", \"Doc1\", \"Doc2\", \"Doc2\", \"Doc3\"),   c_theme1 = c(TRUE, FALSE, TRUE, FALSE, TRUE),   c_theme2 = c(FALSE, TRUE, TRUE, TRUE, FALSE),   c_theme3 = c(FALSE, FALSE, FALSE, TRUE, TRUE) )  code_counts <- count_codes(df)  # Plot excerpt frequencies plot_counts(code_counts)   # Plot by media-title coverage plot_counts(code_counts, metric = \"n_media_titles\")   # Exclude one code plot_counts(code_counts, exclude_codes = \"c_theme2\")   # Filter by absolute count plot_counts(code_counts, min_count = 2)   # Filter by proportion (keep codes at least 50% of max) plot_counts(code_counts, min_prop = 0.5)"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Code Saturation — plot_saturation","title":"Plot Code Saturation — plot_saturation","text":"plot_saturation() creates bar chart codes meet saturation thresholds defined set_saturation(). Bars represent code counts across excerpts, fill color indicates proportion media titles code appears.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Code Saturation — plot_saturation","text":"","code":"plot_saturation(   code_counts,   total_media_titles = NULL,   min_count = 1,   min_prop_media_titles = NULL,   sort_by = c(\"count\", \"prop_media_titles\") )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Code Saturation — plot_saturation","text":"code_counts tibble data frame output count_codes() containing columns code, count, n_media_titles. total_media_titles Optional. Total number media titles dataset. NULL, defaults maximum n_media_titles. min_count Minimum number excerpts code included (default = 1). min_prop_media_titles Optional. Minimum proportion media titles code must appear. NULL, proportion filter applied. sort_by Whether sort codes \"count\" \"prop_media_titles\" (default = \"count\").","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Code Saturation — plot_saturation","text":"ggplot2 object showing horizontal bar plot code counts, fill color corresponding proportion media titles.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Code Saturation — plot_saturation","text":"function applies filtering logic set_saturation() identify codes meet minimum thresholds frequency coverage. plots results ggplot2.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Code Saturation — plot_saturation","text":"","code":"if (FALSE) { # \\dontrun{ library(readxl) library(dplyr) library(tidyverse)  # Load excerpts and clean excerpts <- read_xlsx(\"inst/raw_data/test_data.xlsx\") preferred_coders <- c(\"a\", \"l\", \"i\", \"r\", \"s\", \"v\", \"c\", \"n\", \"k\") excerpts <- clean_data(excerpts, preferred_coders)  # Count codes code_counts <- count_codes(excerpts, min_count = 10, output = \"tibble\")  # Plot saturation with thresholds plot_saturation(code_counts, min_count = 10, min_prop_media_titles = 0.25) } # }"},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"function analyzes data frame coded excerpts summarize counts specified quality indicators code. filters excerpts preferred coders per media title (already filtered), identifies excerpts quality indicator applies (logical TRUE), returns summary table counting many excerpts code quality indicator applied.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"","code":"quality_indicators(   excerpts = NULL,   preferred_coders = NULL,   qual_indicators = NULL )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"excerpts data frame containing excerpt data logical code columns. Code columns use clean variable names without prefixes suffixes (e.g., \"Priority excerpt\"). preferred_coders character vector specifying coders order preference. Used filter excerpts highest-ranked coder per media title. qual_indicators character vector quality indicator code names summarize. match clean column names present excerpts.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"tibble grouped Code containing counts excerpts quality indicator applied. Columns named \"<quality_indicator>_Count\". output arranged descending order counts.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"function expects excerpts data frame logical columns representing codes. filters preferred coders per media title avoid duplicates. computes counts excerpts code quality indicator applied. Input excerpts pre-cleaned consistent code naming (e.g., using clean_data()).","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'df' is your cleaned excerpts data frame preferred_coders <- c(\"Coder1\", \"Coder2\") qual_indicators <- c(\"Priority excerpt\", \"Heterogeniety\") quality_indicators(df, preferred_coders, qual_indicators) } # }"},{"path":"https://abiraahmi.github.io/DedooseR/reference/set_saturation.html","id":null,"dir":"Reference","previous_headings":"","what":"Set saturation thresholds for codes — set_saturation","title":"Set saturation thresholds for codes — set_saturation","text":"function processes output count_codes() allows user : (1) apply minimum excerpt count threshold codes, (2) compute transcript coverage proportion media titles (rounded two decimals). output contains code, count, coverage proportion.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/set_saturation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set saturation thresholds for codes — set_saturation","text":"","code":"set_saturation(   code_counts,   total_media_titles = NULL,   min_count = 1,   min_prop_media_titles = NULL,   output_type = c(\"tibble\", \"kable\") )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/set_saturation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set saturation thresholds for codes — set_saturation","text":"code_counts tibble data frame output count_codes(). Must contain least columns code, count, n_media_titles. total_media_titles Optional integer giving total number unique media titles dataset. NULL (default), inferred maximum observed n_media_titles. min_count integer specifying minimum excerpt frequency required code included. Defaults 1. min_prop_media_titles numeric value 0 1 specifying minimum transcript coverage proportion required code included. Defaults NULL (filter). output_type Output format. One : \"tibble\" (default): returns tibble. \"kable\": returns formatted table knitr::kable().","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/set_saturation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set saturation thresholds for codes — set_saturation","text":"tibble (kable table) three columns: code code name. count Total number excerpts code applied. prop Proportion unique media titles containing code, rounded two decimals.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/set_saturation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set saturation thresholds for codes — set_saturation","text":"","code":"# Example dataset df <- data.frame(   media_title = c(\"Doc1\", \"Doc1\", \"Doc2\", \"Doc2\", \"Doc3\"),   c_theme1 = c(TRUE, FALSE, TRUE, FALSE, TRUE),   c_theme2 = c(FALSE, TRUE, TRUE, TRUE, FALSE),   c_theme3 = c(FALSE, FALSE, FALSE, TRUE, TRUE) )  code_counts <- count_codes(df)  # Default saturation (keep all codes) set_saturation(code_counts) #> # A tibble: 3 × 3 #>   code     count prop_media_titles #>   <chr>    <int>             <dbl> #> 1 c_theme1     3              1    #> 2 c_theme2     3              0.67 #> 3 c_theme3     2              0.67  # Require codes to appear in at least 2 excerpts set_saturation(code_counts, min_count = 2) #> # A tibble: 3 × 3 #>   code     count prop_media_titles #>   <chr>    <int>             <dbl> #> 1 c_theme1     3              1    #> 2 c_theme2     3              0.67 #> 3 c_theme3     2              0.67  # Require codes to appear in at least 50% of media titles set_saturation(code_counts, min_prop_media_titles = 0.5) #> # A tibble: 3 × 3 #>   code     count prop_media_titles #>   <chr>    <int>             <dbl> #> 1 c_theme1     3              1    #> 2 c_theme2     3              0.67 #> 3 c_theme3     2              0.67  # Return formatted as kable if (requireNamespace(\"knitr\", quietly = TRUE)) {   set_saturation(code_counts, min_count = 2, output_type = \"kable\") } #>  #>  #> Table: Code Counts with Transcript Proportions (min_count = 2 , min_prop_media_titles = none ) #>  #> |code     | count| prop_media_titles| #> |:--------|-----:|-----------------:| #> |c_theme1 |     3|              1.00| #> |c_theme2 |     3|              0.67| #> |c_theme3 |     2|              0.67|"},{"path":"https://abiraahmi.github.io/DedooseR/news/index.html","id":"dedooser-004","dir":"Changelog","previous_headings":"","what":"DedooseR 0.0.4","title":"DedooseR 0.0.4","text":"2025-10-03: Added plot_compare_saturation function can visualize codes meet criteria thresholds set 2025-10-03: Added compare_saturation function can set saturation thresholds see codes meet 2025-10-03: Added plot_saturation function can visualize set_saturation 2025-10-03: Updated set_saturation function can set either code counts, transcript coverage ","code":""},{"path":"https://abiraahmi.github.io/DedooseR/news/index.html","id":"dedooser-003","dir":"Changelog","previous_headings":"","what":"DedooseR 0.0.3","title":"DedooseR 0.0.3","text":"2025-10-03: Updated plot_counts function can plot either code counts transcript coverage 2025-10-03: Updated count_codes function output transcript coverage","code":""},{"path":"https://abiraahmi.github.io/DedooseR/news/index.html","id":"dedooser-002","dir":"Changelog","previous_headings":"","what":"DedooseR 0.0.2","title":"DedooseR 0.0.2","text":"2025-10-02: Updated clean_data function include exportable codebook!","code":""},{"path":"https://abiraahmi.github.io/DedooseR/news/index.html","id":"dedooser-001","dir":"Changelog","previous_headings":"","what":"DedooseR 0.0.1","title":"DedooseR 0.0.1","text":"2025-08-05: Welcome DedooseR! Today, added first four functions - come soon ;)","code":""}]
