[{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://abiraahmi.github.io/DedooseR/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://abiraahmi.github.io/DedooseR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Abiraahmi Shankar. Author, maintainer. Catalina Cañizares. Author. Francisco Cardozo. Author. Pamela Morris-Perez. Author.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shankar , Cañizares C, Cardozo F, Morris-Perez P (2025). DedooseR: DedooseR Qualitative data monitoring & analysis. R package version 0.0.3, https://abiraahmi.github.io/DedooseR.","code":"@Manual{,   title = {DedooseR: DedooseR for Qualitative data monitoring & analysis},   author = {Abiraahmi Shankar and Catalina Cañizares and Francisco Cardozo and Pamela Morris-Perez},   year = {2025},   note = {R package version 0.0.3},   url = {https://abiraahmi.github.io/DedooseR}, }"},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"dedooser","dir":"","previous_headings":"","what":"DedooseR for Qualitative data monitoring & analysis","title":"DedooseR for Qualitative data monitoring & analysis","text":"DedooseR R package connects Dedoose support analysis qualitative data. built help researchers streamline workflows improve transparency rigor qualitative coding analysis.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"DedooseR for Qualitative data monitoring & analysis","text":"DedooseR currently allows : Clean data exported Dedoose Summarize code frquencies one coder/media title order coder preference Plot raw frequencies proportions codes applied total codes, define min frequency visualize /exclude codes Set saturation criteria plot Plot play saturation criteria sets Produce code co-occurrence heatmaps","code":""},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"coming-soon","dir":"","previous_headings":"Key Features","what":"Coming Soon","title":"DedooseR for Qualitative data monitoring & analysis","text":"Viewing organizing excerpts interactive table Developing codebooks Calculating reliability per coder (Cohen’s kappa) coders (Fleiss’ kappa)","code":""},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"why-this-package","dir":"","previous_headings":"","what":"Why This Package?","title":"DedooseR for Qualitative data monitoring & analysis","text":"Ongoing challenges qualitative research include defining constitutes high-quality data demonstrating transparency saturation reached (Small & Calarco, 2022). Informed guidelines high-quality qualitative research (Hennink & Kaiser, 2022), DedooseR allows better understand data quality tags Dedoose like: concreteness excerpts (priority code) heterogeneity within codes (heterogeneity code) tagging indicators Dedoose exploring R, allows gain greater confidence depth diversity datasets.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"DedooseR for Qualitative data monitoring & analysis","text":"can install development version DedooseR GitHub :","code":"# install.packages(\"pak\") pak::pak(\"abiraahmi/DedooseR\")"},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"DedooseR for Qualitative data monitoring & analysis","text":"basic example shows may package:","code":"library(DedooseR)  # Load excerpts from Dedoose excerpts <- read_xlsx(\"file path\") cooccurence <- read_xlsx(\"file path\")  # Clean data filepath <- \"path/to/your/file\" preferred_coders <- c(\"s\", \"r\", \"l\", \"a\") excerpts <- clean_data(filepath = filepath, preferred_coders = preferred_coders)  # Summarize codes (1 coder/transcript according to listed coder preference) df_all_summary <-summarize_codes(excerpts,                                preferred_coders,                                output_type = \"datatable\")  # Plot counts by raq frequency, proportion of total codes, set minimum count to  # visualize, and/or exclude codes plot_counts(df_all_summary,             plot_proportion = FALSE,             min_count = 40,             exclude_codes = c(\"Priority excerpt\", \"Heterogeniety\"))   # If you've been tagging excerpts by quality indicators, set them below and  # summarize code counts based on these selections  df_qual_summary <- quality_indicators(excerpts,                                    preferred_coders,                                   qual_indicators =                                    c(\"Priority excerpt\", \"Heterogeniety\")) df_all_summary <- summarize_codes(excerpts,                                  preferred_coders,                                  output_type = \"tibble\") # Now call your plot function with these two datasets # You can set a min code frequency to plot or plot by proportion of total counts plot_saturation(   df_all_summary,   df_qual_summary,   qual_indicators = c(\"Priority excerpt\", \"Heterogeniety\"),   min_counts = c(\"Priority excerpt\" = 3, \"Heterogeniety\" = 3),   stacked = TRUE,   as_proportion = FALSE)    # Play around with the thresholds and see which codes reach saturation # Define thresholds thresholds_list <- list(   \"Set 1\" = list(     `Priority excerpt` = 2,     Heterogeniety = 3   ),   \"Set 2\" = list(     `Priority excerpt` = 5,     Heterogeniety = 3   ) )  plot_saturation_comp(   summary_data = summary_data,   quality_summary = quality_summary,   thresholds_list = thresholds_list,   stacked = TRUE,   as_proportion = TRUE,   ncol = 2 )  # Load co-occurence datasets from Dedoose cooccurence <- read_xlsx(\"file path\") # Produce code co-occurence heat map cooccur(cooccurence, min_frequency = 10)"},{"path":"https://abiraahmi.github.io/DedooseR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"DedooseR for Qualitative data monitoring & analysis","text":"Hennink, M., & Kaiser, B. N. (2022). Sample sizes saturation qualitative research: systematic review empirical tests. Social science & medicine, 292, 114523. Small, M. L., & Calarco, J. M. (2022). Qualitative Literacy: Guide Evaluating Ethnographic Interview Research (1st ed.). University California Press. https://doi.org/10.2307/j.ctv2vr9c4x","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and prepare excerpt-level coding data — clean_data","title":"Clean and prepare excerpt-level coding data — clean_data","text":"function cleans dataset coded excerpts exported Dedoose (similar qualitative coding platform). standardizes variable names, converts code columns logicals, filters preferred coder per transcript, assigns variable labels. codebook also generated saved global environment.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and prepare excerpt-level coding data — clean_data","text":"","code":"clean_data(excerpts, preferred_coders)"},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and prepare excerpt-level coding data — clean_data","text":"excerpts data frame containing raw excerpt-level coding data. Must include least columns media_title excerpt_creator. preferred_coders character vector coder IDs order preference (e.g., c(\"\", \"l\", \"\", \"r\")).","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and prepare excerpt-level coding data — clean_data","text":"cleaned data frame excerpts standardized columns, filtered preferred coder, labeled variables. codebook data frame also assigned global environment.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and prepare excerpt-level coding data — clean_data","text":"cleaning steps performed : Standardize column names lowercase replace spaces underscores. Rename excerpt_copy excerpt present. Drop columns ending \"range\" \"weight\". Identify code columns (names starting \"code\" ending \"applied\"). Convert code columns text logical (TRUE \"true\", otherwise FALSE). Clean rename code column names stripping prefixes/suffixes adding c_ prefix. Save final set cleaned code column names labeling. Filter preferred coder media_title, based order preferred_coders. Apply human-readable variable labels common metadata fields code columns. Generate codebook (variable, label, type) assign global environment codebook.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and prepare excerpt-level coding data — clean_data","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage raw_excerpts <- readxl::read_xlsx(\"inst/raw_data/test_data.xlsx\") preferred <- c(\"a\", \"l\", \"i\", \"r\", \"s\") cleaned <- clean_data(raw_excerpts, preferred)  # View the automatically created codebook head(codebook) } # }"},{"path":"https://abiraahmi.github.io/DedooseR/reference/coccur.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Code Co-occurrence Heatmap — coccur","title":"Plot Code Co-occurrence Heatmap — coccur","text":"Plot Code Co-occurrence Heatmap","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/coccur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Code Co-occurrence Heatmap — coccur","text":"","code":"coccur(file_path, sheet = 1, min_frequency = 5, code_labels = NULL)"},{"path":"https://abiraahmi.github.io/DedooseR/reference/coccur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Code Co-occurrence Heatmap — coccur","text":"file_path String path Excel file containing co-occurrence matrix. sheet Integer string specifying sheet number name (default: 1). min_frequency Numeric; minimum frequency threshold display heatmap (default: 5). code_labels Optional named vector data.frame mapping codes readable labels. named vector: names original codes, values labels. data.frame: must columns 'Code' 'Label'.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/coccur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Code Co-occurrence Heatmap — coccur","text":"ggplot2 heatmap object visualizing code co-occurrences threshold.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Count code applications across excerpts — count_codes","title":"Count code applications across excerpts — count_codes","text":"function summarizes frequency applied codes (logical columns) across dataset excerpts. returns total number excerpts code appears, well number unique media_titles code applied. Results can returned tibble, formatted table (knitr::kable), interactive table (DT::datatable).","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count code applications across excerpts — count_codes","text":"","code":"count_codes(   excerpts,   min_count = 1,   output_type = c(\"tibble\", \"kable\", \"datatable\") )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count code applications across excerpts — count_codes","text":"excerpts data frame containing least media_title column one logical columns (assumed represent codes). row represent coded excerpt. min_count integer specifying minimum number occurrences required code included output. Defaults 1. output_type Character string specifying output format. Must one : \"tibble\": returns tibble (default). \"kable\": returns formatted table via knitr::kable(). \"datatable\": returns interactive table via DT::datatable().","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count code applications across excerpts — count_codes","text":"summary code counts format specified output_type. default, tibble following columns: code name code (column name). count Total number excerpts code applied. n_media_titles Number unique media_titles containing least one excerpt code.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count code applications across excerpts — count_codes","text":"function automatically identifies code columns logical (TRUE/FALSE) within provided excerpts data frame. reshapes data long format, filters TRUE values, aggregates counts code level.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/count_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count code applications across excerpts — count_codes","text":"","code":"# Example dataset df <- data.frame(   media_title = c(\"Doc1\", \"Doc1\", \"Doc2\", \"Doc2\", \"Doc3\"),   c_theme1 = c(TRUE, FALSE, TRUE, FALSE, TRUE),   c_theme2 = c(FALSE, TRUE, TRUE, TRUE, FALSE),   c_theme3 = c(FALSE, FALSE, FALSE, TRUE, TRUE) )  # Get code counts as a tibble count_codes(df) #> # A tibble: 3 × 3 #>   code     count n_media_titles #>   <chr>    <int>          <int> #> 1 c_theme1     3              3 #> 2 c_theme2     3              2 #> 3 c_theme3     2              2  # Apply a minimum count filter (codes must appear in >= 2 excerpts) count_codes(df, min_count = 2) #> # A tibble: 3 × 3 #>   code     count n_media_titles #>   <chr>    <int>          <int> #> 1 c_theme1     3              3 #> 2 c_theme2     3              2 #> 3 c_theme3     2              2  # Return results as a kable if (requireNamespace(\"knitr\", quietly = TRUE)) {   count_codes(df, output_type = \"kable\") } #>  #>  #> Table: Total Code Counts (min_count = 1 ) #>  #> |code     | count| n_media_titles| #> |:--------|-----:|--------------:| #> |c_theme1 |     3|              3| #> |c_theme2 |     3|              2| #> |c_theme3 |     2|              2|  # Return results as an interactive datatable if (requireNamespace(\"DT\", quietly = TRUE)) {   count_codes(df, output_type = \"datatable\") }  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Total Code Counts (min_count = 1 )<\\/caption>\",\"data\":[[\"1\",\"2\",\"3\"],[\"c_theme1\",\"c_theme2\",\"c_theme3\"],[3,3,2],[3,2,2]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>code<\\/th>\\n      <th>count<\\/th>\\n      <th>n_media_titles<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":30,\"autoWidth\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"code\",\"targets\":1},{\"name\":\"count\",\"targets\":2},{\"name\":\"n_media_titles\",\"targets\":3}],\"order\":[],\"orderClasses\":false,\"lengthMenu\":[10,25,30,50,100]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot code frequencies — plot_counts","title":"Plot code frequencies — plot_counts","text":"function takes output count_codes() produces bar plot code frequencies using ggplot2. supports excluding specific codes, filtering absolute count, filtering proportion maximum count. user can choose whether plot total excerpt frequency (count) number distinct media titles containing code (n_media_titles).","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot code frequencies — plot_counts","text":"","code":"plot_counts(   code_counts,   exclude_codes = NULL,   min_count = NULL,   min_prop = NULL,   metric = c(\"count\", \"n_media_titles\"),   fill_color = \"steelblue\" )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot code frequencies — plot_counts","text":"code_counts tibble data frame output count_codes(). Must contain least columns code, count, n_media_titles. exclude_codes character vector code names exclude plot. Defaults NULL (exclusions). min_count integer specifying minimum absolute count code included. Defaults NULL. min_prop numeric value 0 1 specifying minimum proportion (relative maximum chosen metric) required code included. Defaults NULL. metric metric plot. One \"count\" (excerpt frequency) \"n_media_titles\" (media title coverage). Defaults \"count\". fill_color character string giving fill color bars. Defaults \"steelblue\".","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot code frequencies — plot_counts","text":"ggplot object showing code frequencies.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot code frequencies — plot_counts","text":"Codes can filtered either absolute count (min_count) proportion maximum (min_prop). supplied, filters applied. Codes listed exclude_codes removed prior filtering. metric argument controls whether y-axis shows excerpt frequency number unique media titles containing code.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot code frequencies — plot_counts","text":"","code":"# Example data df <- data.frame(   media_title = c(\"Doc1\", \"Doc1\", \"Doc2\", \"Doc2\", \"Doc3\"),   c_theme1 = c(TRUE, FALSE, TRUE, FALSE, TRUE),   c_theme2 = c(FALSE, TRUE, TRUE, TRUE, FALSE),   c_theme3 = c(FALSE, FALSE, FALSE, TRUE, TRUE) )  code_counts <- count_codes(df)  # Plot excerpt frequencies plot_counts(code_counts)   # Plot by media-title coverage plot_counts(code_counts, metric = \"n_media_titles\")   # Exclude one code plot_counts(code_counts, exclude_codes = \"c_theme2\")   # Filter by absolute count plot_counts(code_counts, min_count = 2)   # Filter by proportion (keep codes at least 50% of max) plot_counts(code_counts, min_prop = 0.5)"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Code Saturation by Quality Indicators — plot_saturation","title":"Plot Code Saturation by Quality Indicators — plot_saturation","text":"Creates horizontal stacked dodged bar plot visualizing counts proportions quality indicator annotations per code. codes specified quality indicators present least (count > 0) shown.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Code Saturation by Quality Indicators — plot_saturation","text":"","code":"plot_saturation(   df_all_summary,   df_qual_summary,   qual_indicators = NULL,   min_counts = NULL,   stacked = TRUE,   as_proportion = FALSE )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Code Saturation by Quality Indicators — plot_saturation","text":"df_all_summary data frame (tibble) summarizing codes, must contain least Code total_preferred_coder columns. df_qual_summary data frame (tibble) containing quality indicator counts per code. Must columns named exactly qual_indicators, Code column. qual_indicators character vector quality indicator names plot (e.g., c(\"Priority excerpt\", \"Heterogeneity\")). determine columns use filter . min_counts Optional named numeric vector specifying minimum counts quality indicator include code (e.g., c(\"Priority excerpt\" = 20, \"Heterogeneity\" = 30)). Codes counts thresholds respective quality indicators excluded. stacked Logical; TRUE (default), bars quality indicators stacked; FALSE, bars dodged (side--side). as_proportion Logical; TRUE, y-axis represent proportions counts per code rather raw counts.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Code Saturation by Quality Indicators — plot_saturation","text":"ggplot object displaying counts proportions quality indicator annotations code.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Code Saturation by Quality Indicators — plot_saturation","text":"function filters display codes counts greater zero specified quality indicators. plot orders codes descending total counts total_preferred_coder. Colors generated discrete gradient palette visual clarity. Input data frames outputs summarize_codes() quality_indicators() functions equivalent structure.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Code Saturation by Quality Indicators — plot_saturation","text":"","code":"if (FALSE) { # \\dontrun{ summary_data <- summarize_codes(excerpts, preferred_coders, output_type = \"tibble\") quality_data <- quality_indicators(excerpts, preferred_coders, qual_indicators = c(\"Priority excerpt\", \"Heterogeneity\"))  plot_saturation(   summary_data,   quality_data,   qual_indicators = c(\"Priority excerpt\", \"Heterogeneity\"),   min_counts = c(\"Priority excerpt\" = 3, \"Heterogeneity\" = 3),   stacked = TRUE,   as_proportion = FALSE ) } # }"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Code Saturation Across Multiple Threshold Sets — plot_saturation_comp","title":"Compare Code Saturation Across Multiple Threshold Sets — plot_saturation_comp","text":"Creates stacked (side--side) bar charts visualizing code counts quality indicators multiple sets user-defined thresholds. set thresholds corresponds unique plot, combined multi-panel figure.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Code Saturation Across Multiple Threshold Sets — plot_saturation_comp","text":"","code":"plot_saturation_comp(   df_all_summary,   df_qual_summary,   thresholds_list,   stacked = TRUE,   as_proportion = FALSE,   ncol = 2 )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Code Saturation Across Multiple Threshold Sets — plot_saturation_comp","text":"df_all_summary data frame containing overall code summary information, including least Code column total_preferred_coder counts. df_qual_summary data frame containing quality indicator counts code. Columns include Code columns names ending _Count representing counts per quality indicator. thresholds_list named list named lists. inner named list specifies minimum count thresholds quality indicator. example:   stacked Logical; TRUE, bars stacked. FALSE, bars dodged side--side. as_proportion Logical; TRUE, plots proportions relative total counts per code, otherwise plots raw counts. ncol Number columns arrange multiple plots .","code":"list(   Set1 = list(Heterogeniety = 3, `Priority excerpt` = 2),   Set2 = list(Heterogeniety = 1, `Priority excerpt` = 3) )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Code Saturation Across Multiple Threshold Sets — plot_saturation_comp","text":"patchwork object containing combined ggplot2 bar charts, one threshold set.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/plot_saturation_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Code Saturation Across Multiple Threshold Sets — plot_saturation_comp","text":"","code":"if (FALSE) { # \\dontrun{ thresholds <- list(   Set1 = list(Heterogeniety = 3, `Priority excerpt` = 2),   Set2 = list(Heterogeniety = 1, `Priority excerpt` = 3) ) plot_saturation_comp(df_all_summary, df_qual_summary, thresholds, stacked = TRUE, as_proportion = FALSE) } # }"},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"function analyzes data frame coded excerpts summarize counts specified quality indicators code. filters excerpts preferred coders per media title (already filtered), identifies excerpts quality indicator applies (logical TRUE), returns summary table counting many excerpts code quality indicator applied.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"","code":"quality_indicators(   excerpts = NULL,   preferred_coders = NULL,   qual_indicators = NULL )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"excerpts data frame containing excerpt data logical code columns. Code columns use clean variable names without prefixes suffixes (e.g., \"Priority excerpt\"). preferred_coders character vector specifying coders order preference. Used filter excerpts highest-ranked coder per media title. qual_indicators character vector quality indicator code names summarize. match clean column names present excerpts.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"tibble grouped Code containing counts excerpts quality indicator applied. Columns named \"<quality_indicator>_Count\". output arranged descending order counts.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"function expects excerpts data frame logical columns representing codes. filters preferred coders per media title avoid duplicates. computes counts excerpts code quality indicator applied. Input excerpts pre-cleaned consistent code naming (e.g., using clean_data()).","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/quality_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Quality Indicator Counts by Code from Excerpts Data — quality_indicators","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'df' is your cleaned excerpts data frame preferred_coders <- c(\"Coder1\", \"Coder2\") qual_indicators <- c(\"Priority excerpt\", \"Heterogeniety\") quality_indicators(df, preferred_coders, qual_indicators) } # }"},{"path":"https://abiraahmi.github.io/DedooseR/reference/summarize_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Code Counts by Coder and from Preferred Coders — summarize_codes","title":"Summarize Code Counts by Coder and from Preferred Coders — summarize_codes","text":"function summarizes many times code applied coder, presents data wide format: one row per code, one column per coder, along two total count columns: Total count coders (regardless preference) Total count preferred coders (one coder per media title, selected order preference)","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/summarize_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Code Counts by Coder and from Preferred Coders — summarize_codes","text":"","code":"summarize_codes(   excerpts,   preferred_coders,   output_type = c(\"tibble\", \"kable\", \"datatable\") )"},{"path":"https://abiraahmi.github.io/DedooseR/reference/summarize_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Code Counts by Coder and from Preferred Coders — summarize_codes","text":"excerpts data frame coded excerpts, typically read Excel file. Must include column Excerpt Creator indicating coded excerpt, column Media Title identifying transcript, columns prefixed Code: code (binary indicators). preferred_coders character vector coder names preferred order, used resolve duplicates multiple coders coded transcript. output_type string indicating output format: one \"tibble\", \"kable\", \"datatable\". Defaults \"tibble\".","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/summarize_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Code Counts by Coder and from Preferred Coders — summarize_codes","text":"table summarizing number times code applied coder, including total counts coders preferred coders . format depends output_type.","code":""},{"path":"https://abiraahmi.github.io/DedooseR/reference/summarize_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Code Counts by Coder and from Preferred Coders — summarize_codes","text":"","code":"if (FALSE) { # \\dontrun{ excerpts <- readxl::read_xlsx(\"data/my_coded_excerpts.xlsx\") preferred_coders <- c(\"s\", \"r\", \"l\", \"a\") summarize_codes(excerpts, preferred_coders, output_type = \"datatable\") } # }"},{"path":[]},{"path":"https://abiraahmi.github.io/DedooseR/news/index.html","id":"dedooser-002","dir":"Changelog","previous_headings":"","what":"DedooseR 0.0.2","title":"DedooseR 0.0.2","text":"2025-10-03: Updated count_codes function output transcript coverage 2025-10-02: Updated clean_data function include exportable codebook!","code":""},{"path":"https://abiraahmi.github.io/DedooseR/news/index.html","id":"dedooser-001","dir":"Changelog","previous_headings":"","what":"DedooseR 0.0.1","title":"DedooseR 0.0.1","text":"2025-08-05: Welcome DedooseR! Today, added first four functions - come soon ;)","code":""}]
